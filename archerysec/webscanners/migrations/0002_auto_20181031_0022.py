# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-10-31 00:22
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("webscanners", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="acunetix_scan_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True)),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("scan_date", models.TextField(blank=True)),
                ("scan_status", models.TextField(blank=True)),
                ("project_id", models.UUIDField(blank=True)),
                ("total_vul", models.IntegerField(blank=True, null=True)),
                ("critical_vul", models.IntegerField(blank=True, null=True)),
                ("high_vul", models.IntegerField(blank=True, null=True)),
                ("medium_vul", models.IntegerField(blank=True, null=True)),
                ("low_vul", models.IntegerField(blank=True, null=True)),
                ("info_vul", models.IntegerField(blank=True, null=True)),
                ("date_time", models.DateTimeField(blank=True, null=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("total_dup", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="acunetix_scan_result_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("project_id", models.TextField(blank=True)),
                ("vuln_id", models.TextField(blank=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("false_positive", models.TextField(blank=True, null=True)),
                ("vuln_color", models.TextField(blank=True, null=True)),
                ("jira_ticket", models.TextField(blank=True, null=True)),
                ("vuln_status", models.TextField(blank=True, null=True)),
                ("dup_hash", models.TextField(blank=True, null=True)),
                ("vuln_duplicate", models.TextField(blank=True, null=True)),
                ("false_positive_hash", models.TextField(blank=True, null=True)),
                ("ScanName", models.TextField(blank=True, null=True)),
                ("ScanShortName", models.TextField(blank=True, null=True)),
                ("ScanStartURL", models.TextField(blank=True, null=True)),
                ("ScanStartTime", models.TextField(blank=True, null=True)),
                ("ScanFinishTime", models.TextField(blank=True, null=True)),
                ("ScanScanTime", models.TextField(blank=True, null=True)),
                ("ScanAborted", models.TextField(blank=True, null=True)),
                ("ScanResponsive", models.TextField(blank=True, null=True)),
                ("ScanBanner", models.TextField(blank=True, null=True)),
                ("ScanOs", models.TextField(blank=True, null=True)),
                ("ScanWebServer", models.TextField(blank=True, null=True)),
                ("ScanTechnologies", models.TextField(blank=True, null=True)),
                ("ScanCrawler", models.TextField(blank=True, null=True)),
                ("ScanReportItems", models.TextField(blank=True, null=True)),
                ("VulnName", models.TextField(blank=True, null=True)),
                ("VulnModuleName", models.TextField(blank=True, null=True)),
                ("VulnDetails", models.TextField(blank=True, null=True)),
                ("VulnAffects", models.TextField(blank=True, null=True)),
                ("VulnParameter", models.TextField(blank=True, null=True)),
                ("VulnAOP_SourceFile", models.TextField(blank=True, null=True)),
                ("VulnAOP_SourceLine", models.TextField(blank=True, null=True)),
                ("VulnAOP_Additional", models.TextField(blank=True, null=True)),
                ("VulnIsFalsePositive", models.TextField(blank=True, null=True)),
                ("VulnSeverity", models.TextField(blank=True, null=True)),
                ("VulnType", models.TextField(blank=True, null=True)),
                ("VulnImpact", models.TextField(blank=True, null=True)),
                ("VulnDescription", models.TextField(blank=True, null=True)),
                ("VulnDetailedInformation", models.TextField(blank=True, null=True)),
                ("VulnRecommendation", models.TextField(blank=True, null=True)),
                ("VulnTechnicalDetails", models.TextField(blank=True, null=True)),
                ("VulnCWEList", models.TextField(blank=True, null=True)),
                ("VulnCVEList", models.TextField(blank=True, null=True)),
                ("VulnCVSS", models.TextField(blank=True, null=True)),
                ("VulnCVSS3", models.TextField(blank=True, null=True)),
                ("VulnReferences", models.TextField(blank=True, null=True)),
                ("UriName", models.TextField(blank=True, null=True)),
                ("VulnUrl", models.TextField(blank=True, null=True)),
                ("VulnFullUrl", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="arachni_scan_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True)),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("scan_date", models.TextField(blank=True)),
                ("scan_status", models.TextField(blank=True)),
                ("project_id", models.UUIDField(blank=True)),
                ("total_vul", models.IntegerField(blank=True, null=True)),
                ("high_vul", models.IntegerField(blank=True, null=True)),
                ("medium_vul", models.IntegerField(blank=True, null=True)),
                ("low_vul", models.IntegerField(blank=True, null=True)),
                ("date_time", models.DateTimeField(blank=True, null=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("total_dup", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="arachni_scan_result_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("project_id", models.TextField(blank=True)),
                ("vuln_id", models.TextField(blank=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True)),
                ("description", models.TextField(blank=True)),
                ("remedy_guidance", models.TextField(blank=True)),
                ("severity", models.TextField(blank=True)),
                ("proof", models.TextField(blank=True)),
                ("vuln_color", models.TextField(blank=True)),
                ("url", models.TextField(blank=True)),
                ("action", models.TextField(blank=True)),
                ("body", models.TextField(blank=True)),
                ("false_positive", models.TextField(blank=True)),
                ("cwe", models.TextField(blank=True)),
                ("ref_key", models.TextField(blank=True)),
                ("ref_value", models.TextField(blank=True)),
                ("vector_input_key", models.TextField(blank=True)),
                ("vector_input_values", models.TextField(blank=True)),
                ("vector_source_key", models.TextField(blank=True)),
                ("vector_source_values", models.TextField(blank=True)),
                ("page_body_data", models.TextField(blank=True)),
                ("request_url", models.TextField(blank=True)),
                ("request_method", models.TextField(blank=True)),
                ("request_raw", models.TextField(blank=True)),
                ("response_ip", models.TextField(blank=True)),
                ("response_raw_headers", models.TextField(blank=True)),
                ("jira_ticket", models.TextField(blank=True, null=True)),
                ("vuln_status", models.TextField(blank=True, null=True)),
                ("dup_hash", models.TextField(blank=True, null=True)),
                ("vuln_duplicate", models.TextField(blank=True, null=True)),
                ("false_positive_hash", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="burp_scan_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True)),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("scan_date", models.TextField(blank=True)),
                ("scan_status", models.TextField(blank=True)),
                ("project_id", models.UUIDField(blank=True)),
                ("total_vul", models.IntegerField(blank=True, null=True)),
                ("high_vul", models.IntegerField(blank=True, null=True)),
                ("medium_vul", models.IntegerField(blank=True, null=True)),
                ("low_vul", models.IntegerField(blank=True, null=True)),
                ("date_time", models.DateTimeField(blank=True, null=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("total_dup", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="burp_scan_result_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("project_id", models.TextField(blank=True)),
                ("vuln_id", models.TextField(blank=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("serialNumber", models.TextField(blank=True)),
                ("types", models.TextField(blank=True)),
                ("name", models.TextField(blank=True)),
                ("host", models.TextField(blank=True)),
                ("path", models.TextField(blank=True)),
                ("location", models.TextField(blank=True)),
                ("severity", models.TextField(blank=True)),
                ("severity_color", models.TextField(blank=True)),
                ("confidence", models.TextField(blank=True)),
                ("issueBackground", models.TextField(blank=True)),
                ("remediationBackground", models.TextField(blank=True)),
                ("references", models.TextField(blank=True)),
                ("vulnerabilityClassifications", models.TextField(blank=True)),
                ("issueDetail", models.TextField(blank=True)),
                ("requestresponse", models.TextField(blank=True)),
                ("scan_request", models.TextField(blank=True)),
                ("scan_response", models.TextField(blank=True)),
                ("method", models.TextField(blank=True)),
                ("false_positive", models.TextField(blank=True, null=True)),
                ("jira_ticket", models.TextField(blank=True, null=True)),
                ("vuln_status", models.TextField(blank=True, null=True)),
                ("dup_hash", models.TextField(blank=True, null=True)),
                ("vuln_duplicate", models.TextField(blank=True, null=True)),
                ("false_positive_hash", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="cookie_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.TextField(blank=True)),
                ("cookie", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="email_config_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email_id_from", models.EmailField(blank=True, max_length=254)),
                ("email_subject", models.TextField(blank=True)),
                ("email_message", models.TextField(blank=True)),
                ("email_id_to", models.EmailField(blank=True, max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name="excluded_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("exclude_url", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="netsparker_scan_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True)),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("scan_date", models.TextField(blank=True)),
                ("scan_status", models.TextField(blank=True)),
                ("project_id", models.UUIDField(blank=True)),
                ("total_vul", models.IntegerField(blank=True, null=True)),
                ("critical_vul", models.IntegerField(blank=True, null=True)),
                ("high_vul", models.IntegerField(blank=True, null=True)),
                ("medium_vul", models.IntegerField(blank=True, null=True)),
                ("low_vul", models.IntegerField(blank=True, null=True)),
                ("info_vul", models.IntegerField(blank=True, null=True)),
                ("date_time", models.DateTimeField(blank=True, null=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("total_dup", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="netsparker_scan_result_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("project_id", models.TextField(blank=True)),
                ("vuln_id", models.TextField(blank=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("vuln_url", models.TextField(blank=True, null=True)),
                ("type", models.TextField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                ("certainty", models.TextField(blank=True, null=True)),
                ("rawrequest", models.TextField(blank=True, null=True)),
                ("rawresponse", models.TextField(blank=True, null=True)),
                ("extrainformation", models.TextField(blank=True, null=True)),
                ("classification", models.TextField(blank=True, null=True)),
                ("false_positive", models.TextField(blank=True, null=True)),
                ("vuln_color", models.TextField(blank=True, null=True)),
                ("jira_ticket", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("impact", models.TextField(blank=True, null=True)),
                ("actionsToTake", models.TextField(blank=True, null=True)),
                ("remedy", models.TextField(blank=True, null=True)),
                (
                    "requiredSkillsForExploitation",
                    models.TextField(blank=True, null=True),
                ),
                ("externalReferences", models.TextField(blank=True, null=True)),
                ("remedyReferences", models.TextField(blank=True, null=True)),
                ("proofOfConcept", models.TextField(blank=True, null=True)),
                ("proofs", models.TextField(blank=True, null=True)),
                ("vuln_status", models.TextField(blank=True, null=True)),
                ("dup_hash", models.TextField(blank=True, null=True)),
                ("vuln_duplicate", models.TextField(blank=True, null=True)),
                ("false_positive_hash", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="task_schedule_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task_id", models.TextField(blank=True, null=True)),
                ("target", models.TextField(blank=True, null=True)),
                ("schedule_time", models.TextField(blank=True, null=True)),
                ("project_id", models.TextField(blank=True, null=True)),
                ("scanner", models.TextField(blank=True, null=True)),
                ("periodic_task", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="web_scan_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scan_url", models.URLField(blank=True)),
                ("scan_id", models.UUIDField(blank=True)),
                ("scan_date", models.TextField(blank=True)),
                ("scan_status", models.TextField(blank=True)),
                ("project_id", models.UUIDField(blank=True)),
                ("total_vul", models.IntegerField(blank=True)),
                ("high_vul", models.IntegerField(blank=True)),
                ("medium_vul", models.IntegerField(blank=True)),
                ("low_vul", models.IntegerField(blank=True)),
                ("info_vuln", models.IntegerField(blank=True)),
                ("scanner", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="webinspect_scan_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.URLField(blank=True)),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("scan_date", models.TextField(blank=True)),
                ("scan_status", models.TextField(blank=True)),
                ("project_id", models.UUIDField(blank=True)),
                ("total_vul", models.IntegerField(blank=True, null=True)),
                ("critical_vul", models.IntegerField(blank=True, null=True)),
                ("high_vul", models.IntegerField(blank=True, null=True)),
                ("medium_vul", models.IntegerField(blank=True, null=True)),
                ("low_vul", models.IntegerField(blank=True, null=True)),
                ("info_vul", models.IntegerField(blank=True, null=True)),
                ("date_time", models.DateTimeField(blank=True, null=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("total_dup", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="webinspect_scan_result_db",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scan_id", models.UUIDField(blank=True)),
                ("rescan_id", models.TextField(blank=True, null=True)),
                ("project_id", models.TextField(blank=True)),
                ("vuln_id", models.TextField(blank=True)),
                ("rescan", models.TextField(blank=True, null=True)),
                ("vuln_url", models.TextField(blank=True, null=True)),
                ("false_positive", models.TextField(blank=True, null=True)),
                ("vuln_color", models.TextField(blank=True, null=True)),
                ("jira_ticket", models.TextField(blank=True, null=True)),
                ("scheme", models.TextField(blank=True, null=True)),
                ("host", models.TextField(blank=True, null=True)),
                ("port", models.TextField(blank=True, null=True)),
                ("attackmethod", models.TextField(blank=True, null=True)),
                ("vulnerablesession", models.TextField(blank=True, null=True)),
                ("triggerSession", models.TextField(blank=True, null=True)),
                ("vulnerabilityID", models.TextField(blank=True, null=True)),
                ("severity", models.TextField(blank=True, null=True)),
                ("name", models.TextField(blank=True, null=True)),
                ("reportSection", models.TextField(blank=True, null=True)),
                ("highlightSelections", models.TextField(blank=True, null=True)),
                ("rawResponse", models.TextField(blank=True, null=True)),
                ("SectionText", models.TextField(blank=True, null=True)),
                ("severity_name", models.TextField(blank=True, null=True)),
                ("vuln_status", models.TextField(blank=True, null=True)),
                ("dup_hash", models.TextField(blank=True, null=True)),
                ("vuln_duplicate", models.TextField(blank=True, null=True)),
                ("false_positive_hash", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="cookieParams",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="date_time",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="dup_hash",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="false_positive",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="false_positive_hash",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="jira_ticket",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="note",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="project_id",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="req_res",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="requestBody",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="requestHeader",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="res_id",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="res_type",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="rescan",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="rescan_id",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="responseBody",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="responseHeader",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="rtt",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="tags",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="timestamp",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="vuln_color",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="vuln_duplicate",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scan_results_db",
            name="vuln_status",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scans_db",
            name="date_time",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="zap_scans_db",
            name="project_id",
            field=models.UUIDField(null=True),
        ),
        migrations.AddField(
            model_name="zap_scans_db",
            name="rescan",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scans_db",
            name="rescan_id",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="zap_scans_db",
            name="total_dup",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="zap_scans_db",
            name="high_vul",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="zap_scans_db",
            name="low_vul",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="zap_scans_db",
            name="medium_vul",
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="zap_scans_db",
            name="scan_url",
            field=models.URLField(blank=True),
        ),
        migrations.AlterField(
            model_name="zap_scans_db",
            name="total_vul",
            field=models.IntegerField(blank=True, null=True),
        ),
    ]
